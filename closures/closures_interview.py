# https://ru.hexlet.io/courses/python-functions/lessons/closures/theory_unit

"""
Замыкания — это функция, которая запоминает значения из своей внешней области видимости, даже если эта область
уже недоступна. Она создается, когда функция объявляется, и продолжает запоминать значения переменных даже после того,
как вызывающая функция завершит свою работу.

Замыкания — это инструмент, который позволяет сохранять значения и состояние между вызовами функций,
создавать функции на лету и возвращать их из других функций.
"""


def outer_function(x):
    def inner_function(y):
        return x + y
    return inner_function


"""
В этом примере мы создаем функцию outer_function, которая принимает аргумент x и возвращает внутреннюю функцию 
inner_function. Внутренняя функция также принимает аргумент y и возвращает сумму x и y.
Затем мы создаем замыкание closure, вызывая outer_function с аргументом 10. Теперь closure ссылается на 
inner_function и хранит значение x как 10.
В конце вызываем closure с аргументом 5 и выводим результат — 15. Замыкание closure сохраняет значение x как 10 
между вызовами, поэтому оно может быть использовано внутри inner_function даже после того, как outer_function 
уже завершила свою работу.
"""


if __name__ == '__main__':
    closures = outer_function(10)
    print(closures.__name__)
    print(closures(5))
    print("*" * 200)

    print(outer_function(10)(5))
