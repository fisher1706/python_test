# https://www.youtube.com/watch?v=gfvJj0kFQeg&list=PLlKID9PnOE5h8VJyEiEd_Uv_-tt9KX7MD&index=2


"""
Декоратор в Python - это паттерн проектирования - синтаксический сахар - функция - объект,
которая принимает другую функцию в качестве аргумента и расширяет ее
функциональность без изменения ее кода.

Декораторы — позволяют модифицировать поведение функций или методов без изменения их исходного кода.
Предоставляют простой способ применения одних и тех же изменений к нескольким функциям, обеспечивая таким образом
высокую степень повторного использования кода. Вот причины почему декораторы полезны в разработке:

1️⃣ Улучшение читаемости и поддержки кода
Помогают сделать код более читаемым и легким для понимания. Они позволяют явно указать,
что поведение функции модифицируется в определенный момент.

2️⃣ Повторное использование кода
Можно определить эту логику в декораторе и применить его ко всем этим функциям.

3️⃣ Модификация поведения функций
Предоставляют удобный способ добавления или изменения функциональности функций без изменения их исходного кода.
Это особенно полезно, когда вы работаете с кодом, который не может или не должен быть изменен напрямую.

4️⃣ Внедрение аспектно-ориентированного программирования(АОП)
Могут использоваться для реализации аспектов в АОП. АОП позволяет разделять аспекты программы,
такие как логирование, от основной бизнес-логики.

5️⃣ Регистрация функций
Могут использоваться для автоматической регистрации функций при их определении.
Это полезно в сценариях, когда необходимо собрать список функций, соответствующих определенному критерию.
"""


def outer(func):
    def inner(*args, **kwargs):
        print("message")
        return func(*args, **kwargs)
    return inner


@outer
def div(a, b):
    return a / b


def second_outer(*dargs, **dkwargs):
    def outer_two(func):
        def inner_two(*args, **kwargs):
            print(*dargs, **dkwargs)
            return func(*args, **kwargs)
        return inner_two
    return outer_two


@second_outer("mess")
def div_two(a, b):
    return a / b


if __name__ == "__main__":
    print(div(1, 2))
    print("*" * 200)

    """
    перед работой закомментировать декоратор @outer
    """
    o = outer(div)
    print(o.__name__)
    o(1, 2)
    print("*" * 200)

    print(outer(div)(1, 2))
    print("*" * 200)

    print(div_two(1, 2))
