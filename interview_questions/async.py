import asyncio

"""
Асинхронность — это концепция, позволяющая выполнение задач в программе так, чтобы они не блокировали выполнение 
друг друга. Это значит, что программа может переключаться между задачами, не дожидаясь завершения каждой из них. 
Это особенно полезно в ситуациях, когда выполнение задачи зависит от внешних факторов, которые могут занять 
неопределенное время (например, ожидание ответа от веб-сервиса или чтение файла).

В Python асинхронность реализуется с помощью корутин и асинхронного ввода-вывода (asyncio) . 
Это позволяет программе быть более эффективной и отзывчивой, особенно при работе с I/O-задачами, 
такими как сетевое взаимодействие или операции с диском, которые могут значительно замедлить выполнение программы, 
если использовать блокирующий ввод-вывод.

Использование асинхронности позволяет повысить производительность программы за счет неблокирующего выполнения задач, 
особенно когда есть много операций ввода-вывода, таких как запросы к сети или к базам данных.
Асинхронность позволяет делать программу более эффективной и отзывчивой, выполняя задачи параллельно и не ожидая 
завершения каждой из них. Это достигается за счет использования асинхронных операций, 
которые не блокируют выполнение программы.


Асинхронность, threading и мультипроцессинг - это три различных подхода к параллельному выполнению задач
каждый из которых имеет свои особенности и применения:

1️⃣ Асинхронность (Asynchronous)
Асинхронность предполагает выполнение задач без ожидания их завершения. 
Используется для работы с вводом-выводом (I/O), таким как чтение или запись файлов, сетевые запросы и т. д. 
В асинхронном коде задачи не блокируют основной поток выполнения, 
что позволяет эффективно использовать ресурсы процессора. 
Примеры асинхронных моделей включают в себя асинхронные функции и 
ключевые слова в Python (например, async, await).

2️⃣ Потоки (Threading)
Потоки позволяют выполнять несколько частей кода (потоков) параллельно в пределах одного процесса. 
Используются для выполнения многозадачных операций, которые могут быть распределены между несколькими ядрами процессора. 
Потоки могут выполняться параллельно, но могут также конкурировать за общие ресурсы, 
что может привести к проблемам синхронизации и безопасности. В некоторых языках, таких как Python, 
использование потоков ограничено из-за GIL (Global Interpreter Lock), 
что может снижать эффективность при использовании множества потоков для CPU-интенсивных задач.

3️⃣ Мультипроцессинг (Multiprocessing)
Мультипроцессинг также позволяет выполнять несколько частей кода параллельно, 
но каждая часть выполняется в отдельном процессе. Каждый процесс имеет свое собственное пространство памяти, 
что делает мультипроцессинг более подходящим для многозадачных вычислений на многоядерных системах. 
Процессы обычно имеют больший накладные расходы по сравнению с потоками, 
поскольку каждый из них требует своих собственных ресурсов памяти и управления. 
Мультипроцессинг избегает проблемы GIL, что делает его более эффективным для 
CPU-интенсивных задач в Python и других языках.

Выбор между асинхронностью, потоками и мультипроцессингом зависит от конкретных требований вашего приложения, 
а также от характеристик вашей системы и языка программирования.


1️⃣ Процесс:
- Представляет собой отдельный экземпляр программы, запущенный в оперативной памяти компьютера.
- У каждого процесса есть собственное адресное пространство памяти, которое оно использует для выполнения своего 
  кода и хранения своих данных.
- Являются изолированными друг от друга, что означает, что изменения, сделанные в одном процессе, 
  не влияют на другие процессы.
- Обычно создаются операционной системой при запуске новой программы.

2️⃣ Поток:
- Представляет собой легковесный подпроцесс внутри процесса.
- Разделяют общее адресное пространство памяти с другими потоками в рамках одного процесса.
- Имеют свой собственный стек вызовов, но разделяют все остальные ресурсы процесса, такие как файловые дескрипторы, 
  переменные и т. д. 
- Могут выполняться параллельно в рамках одного процесса, что позволяет использовать многопоточное программирование 
  для увеличения производительности и ресурсоэффективности.


Основное различие между процессом и потоком заключается в том, что процесс является отдельным исполняемым экземпляром 
программы с собственным адресным пространством памяти, а поток представляет собой легковесный подпроцесс, который 
работает в рамках процесса и использует общие ресурсы этого процесса.
"""


async def hello():
    await asyncio.sleep(1)
    print("Hello")


async def world():
    await asyncio.sleep(2)
    print("World")


async def main():
    await asyncio.gather(hello(), world())


if __name__ == '__main__':
    asyncio.run(main())
