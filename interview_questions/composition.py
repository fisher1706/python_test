# https://ru.stackoverflow.com/questions/955831/%D0%A1%D1%83%D1%82%D1%8C-%D0%BA%D0%BE%D0%BC%D0%BF%D0%BE%D0%B7%D0%B8%D1%86%D0%B8%D0%B8

"""
Композиция (агрегирование) рассматривается в противовес наследованию. Не совсем поняв данное явление в одном источнике,
я пошёл на просторы интернета и выяснил, что идея композиции заключается в том, что это соединение отдельных элементов
в единое целое, а формально это класс, который использует обьекты другого класса.

Разграничительной чертой между наследованием и композицией является тот факт, что при создании объекта
класса-агрегатора также создаются обьекты агрегируемых классов (надеюсь понятно пишу). В моём понимании,
создание объекта это код формата "переменная = класс(параметры)",
а в качестве примера композиции мне давался следующий сниппет:
"""


class Bill:
    def __init__(self, description):
        self.description = description


class Tail:
    def __init__(self, length):
        self.length = length


class Duck:
    def __init__(self, bill, tail):
        self.bill = bill
        self.tail = tail

    def about(self):
        print(
            "This duck has a",
            self.bill.description,
            "bill and a",
            self.tail.length,
            "tail",
        )


if __name__ == "__main__":
    t = Tail("long")
    b = Bill("wide orange")
    duck = Duck(b, t)

    duck.about()

"""
Видно, что при создании объекта duck класса Duck, в параметры bill и tail конструктора передаются одноимённые обьекты, 
которые затем сохраняютcя в качестве переменных self.bill и self.tail.

Как я понимаю, это и есть идея композиции: использование кода других классов в классе-агрегаторе через их обьекты. 
Однако метод about обращается не к этим ново созданным атрибутам, а к объектам агрегируемых классов bill и tail на 
основном уровне программы, которые к тому же ещё не созданы на момент завершения написания класса Duck.

Так зачем мы передавали обьекты в конструктор, впоследствии создав из них атрибуты, которые не получили дальнейшего 
применения и идея композиции потерялась? Более того, конструктора могло вообще не существовать для класса Duck, 
а метод about продолжил бы работать как прежде, ведь его содержимое не связано с какими-либо элементами внутри класса.
"""
