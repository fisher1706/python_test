"""
Магические методы - это специальные методы, начинающиеся и заканчивающиеся двумя подчеркиваниями (__),
которые предоставляют специальное поведение объектам при использовании встроенных операторов или функций.
Они также называются "специальными методами" или "дандер-методами" (от "double underscore").

Магические методы позволяют классам определять, как они должны реагировать на различные операции,
такие как сложение (+),
вычитание (-),
вызов функции (()),
получение длины (len()),
преобразование в строку (str())
и многое другое.

Вот некоторые примеры магических методов и их предназначение:

-  __init__(self, ...): Инициализация объекта. Вызывается при создании нового экземпляра класса.
- __str__(self): Преобразование объекта в строку. Вызывается функцией str() или при использовании объекта в функциях
    форматирования строк.
- __repr__(self): Представление объекта. Вызывается функцией repr(), а также при использовании объекта
    в интерактивной оболочке.
- __add__(self, other): Сложение объектов. Вызывается при использовании оператора +.
- __sub__(self, other): Вычитание объектов. Вызывается при использовании оператора -.
- __len__(self): Получение длины объекта. Вызывается функцией len().
- __getitem__(self, key): Получение элемента по индексу или ключу. Вызывается при использовании оператора [].


Унарные операции (требующие только одного операнда)
__pos__(self)	Вызывается для создания позитивного объекта (+число)
__neg__(self)	Вызывается для создания негативного объекта (-число)
__abs__(self)	Вызывается при вызове функции abs()
__round__(self,n)	Для использования с функцией round()
__floor__(self)	Для использования с функцией math.floor()
__ceil__(self)	Для использования с функцией math.ceil()
__trunc__(self)	Для использования с функцией math.trunc()


Операторы дополненного присваивания
__iadd__(self, other)	Оператор +=
__isub__(self, other)	Оператор -=
__imul__(self, other)	Оператор *=
__ifloordiv__(self, other)	Оператор //=
__idiv__(self, other)	Оператор /=
__imod__(self, other)	Оператор %=
__ipow__(self, other)	Оператор **= (степень и присваивание)
__ilshift__(self, other)	Оператор <<= (Битовый сдвиг в лево и присваивание)
__irshift__(self, other)	Оператор >>= (Битовый сдвиг вправо и присваивание)
__iand__(self, other)	Оператор &= (Битовой AND и присваивание)
__ior__(self, other)	Оператор |= (Битовый OR и присваивание)
__ixor__(self, other)	Оператор ^= (Битовый XOR и присваивание)


Операции
__add__(self, other)	Оператор +
__sub__(self, other)	Оператор -
__mul__(self, other)	Оператор *
__floordiv__(self, other)	Оператор //
__div__(self, other)	Оператор /
__mod__(self, other)	Оператор %
__pow__(self, other[, modulo])	Оператор **
__lt__(self, other)	Оператор < (Less Then)
__le__(self, other)	Оператор <= (Less or Equal)
__eq__(self, other)	Оператор == (Equal)
__ne__(self, other)	Оператор != (Not Equal)
__ge__(self, other)	Оператор >= (Greater or Equal)


Последовательности
__len__(self)	Для использования с функцией len(). Возвращает длину последовательности
__getitem__(self, key)	Получение элемента последовательности через нотацию self[key]
__setitem__(self, key, value)	Присваивание нового значения элементу последовательности через нотацию self[key] = value
__delitem__(self, key)	Удаление элемента через del self[key]
__iter__(self)	Возвращает итератор для этой последовательности. Используется функцией iter() и циклом FOR.
__reversed__(self)	Используется функцией reversed(). Возвращает последовательность в обратном порядке.
__contains__(self, item)	Используется операторами in и not in. Если не реализовано Python будет автоматор
прокручивать вашу последовательность в поисках искового.
__bool__(self)	Вызывается при проверки истинности. Типа: if obj
__call__(self, [args...])	Создает из экземпляра callable-объект, как функцию, например. Должен принимать аргументы.


Контекстные менеджеры
__enter__(self)	То, что должен сделать контекстный менеджер with в начале. Возвращаемое значение __enter__ привязвается
к цели оператора with или к переменной определенной оператором as. Пример: with socket
__exit__(self, exception_type, exception_value, traceback)	Что должно произойти после того, как блок контекстного
менеджера будет выполнен. Обычно это какое-то обязательное действие типа закрытия файла или сокета,
очистки какой-нибудь и т.п.

И это только несколько из множества магических методов, которые можно определить в классе.
Использование магических методов делает классы более интегрированными с языком и позволяет использовать их
встроенные функциональности более элегантным и естественным способом.
"""
