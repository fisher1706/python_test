"""
Миксин (Mixin) – это класс, предназначенный для предоставления определённых методов для использования другими классами,
без необходимости становиться родительским классом для этих классов. Главная цель миксина - реализация функциональности,
которую можно легко подключить к другому классу. Миксины позволяют разработчикам использовать композицию для добавления
функций в классы вместо наследования, что делает структуру кода гибче и модульнее.

Применение миксинов удобно, когда одна и та же функциональность нужна в разных классах,
но эти классы не должны быть связаны отношениями наследования.
Таким образом, миксины позволяют избежать дублирования кода и упростить его поддержку.

В этом примере JsonMixin предоставляет метод to_json, который может сериализовать объекты класса в JSON.
Класс PersonJson наследует этот метод благодаря множественному наследованию, где JsonMixin используется
для добавления функциональности сериализации к классу Person, не изменяя его исходный код.

Использование миксинов делает код более читаемым и легко поддерживаемым, так как оно позволяет разработчикам
комбинировать и переиспользовать функциональности между различными классами без изменения их иерархии наследования.
"""


class JsonMixin:
    def to_json(self):
        import json
        return json.dumps(self.__dict__)


class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age


class PersonJson(JsonMixin, Person):  # Использование миксина для добавления функциональности сериализации в JSON
    pass


if __name__ == '__main__':
    p = PersonJson('Иван', 25)
    print(p.to_json())  # Выведет строку в формате JSON, представляющую объект PersonJson
