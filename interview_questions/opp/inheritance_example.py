"""
Наследование является одним из фундаментальных принципов объектно-ориентированного программирования (ООП).
В Python наследование позволяет одному классу (дочернему классу) наследовать атрибуты и методы другого класса
(родительского класса), обеспечивая тем самым повторное использование кода и упрощение его структуры.

Основы наследования
В Python класс может наследовать функциональность другого класса, причем не только одного, но и нескольких классов,
что называется множественным наследованием. Родительский класс также известен как базовый класс или суперкласс, а класс,
который наследует его свойства, называется производным классом или подклассом.
"""


class Animal:
    def __init__(self, name):
        self.name = name

    def speak(self):
        raise NotImplementedError("Subclass must implement abstract method")


class Dog(Animal):
    def speak(self):
        return f"{self.name} says Woof!"


class Cat(Animal):
    def speak(self):
        return f"{self.name} says Meow!"


"""
В приведенном выше примере класс Animal является базовым классом с методом speak, который предназначен для 
переопределения в подклассах. Классы Dog и Cat наследуют класс Animal и реализуют свою версию метода speak.

Переопределение методов
Подклассы могут переопределить методы базового класса. Это означает, что дочерний класс может иметь метод с таким 
же именем, как и в родительском классе, но с другой или дополненной функциональностью.
"""


"""
Функция super()
Функция super() в Python используется для вызова методов родительского класса из дочернего класса. 
Это особенно полезно в конструкторе __init__, когда необходимо инициализировать атрибуты базового класса.
"""


class Bird(Animal):
    def __init__(self, name, can_fly):
        super().__init__(name)
        self.can_fly = can_fly


"""
Множественное наследование
Python поддерживает множественное наследование, позволяя классу наследовать функциональность более чем одного класса.

В случае множественного наследования Python следует порядку разрешения методов (MRO - Method Resolution Order), 
чтобы определить, какой метод вызывать. В приведенном примере будет вызван метод из класса A, 
так как он указан первым в списке наследования класса C.

Заключение
Наследование в Python предоставляет мощный инструмент для создания структурированного и легко поддерживаемого кода. 
Оно позволяет разработчикам расширять и модифицировать существующий код без его дублирования, 
что ведет к более чистой и эффективной реализации программ.
"""


class A:
    @staticmethod
    def method():
        print("A method")


class B:
    @staticmethod
    def method():
        print("B method")


class C(A, B):
    pass


if __name__ == "__main__":
    obj = C()
    obj.method()
