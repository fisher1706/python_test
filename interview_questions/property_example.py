"""
Декоратор "property" используется для создания вычисляемых атрибутов класса.
Он позволяет определить методы "getter", "setter" и "deleter" для атрибута класса,
что обеспечивает более гибкий доступ к данным объекта.
Вот как работает каждый из этих методов:

1️⃣ Getter (метод получения):
    - Помеченный декоратором @property, представляет собой метод, который возвращает значение атрибута.
    - Вызывается при обращении к атрибуту без использования скобок или при обращении через свойство.

2️⃣ Setter (метод установки):
    - Помеченный декоратором @property.setter, представляет собой метод, который устанавливает значение атрибута.
    - Вызывается при попытке установить новое значение атрибута.

3️⃣ Deleter (метод удаления):
    - Помеченный декоратором @property.deleter, представляет собой метод, который удаляет атрибут.
    - Вызывается при использовании оператора del для удаления атрибута.
"""


class Circle:
    def __init__(self, radius):
        self._radius = radius

    @property
    def radius(self):
        return self._radius

    @radius.setter
    def radius(self, value):
        if value <= 0:
            raise ValueError("Радиус должен быть положительным числом")
        self._radius = value

    @radius.deleter
    def radius(self):
        del self._radius


if __name__ == "__main__":
    # Использование
    c = Circle(5)
    print(c.radius)  # Вывод: 5
    c.radius = 10
    print(c.radius)  # Вывод: 10
    del c.radius
    print(c.radius)  # Вызовет AttributeError, так как атрибут удален
