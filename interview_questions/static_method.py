"""
Cтатические методы реализуются с помощью декоратора @staticmethod. Принадлежит классу,
но не получает автоматически ссылку на экземпляр или класс в качестве первого аргумента. Ведет себя как обычная функция,
но организован внутри пространства имен класса. Используются для выполнения задач, которые не требуют доступа к
атрибутам экземпляра или класса.

Здесь static_method может быть вызван как через имя класса, так и через экземпляр класса,
но в обоих случаях он не имеет доступа к атрибутам self или cls.

Статические методы полезны в следующих ситуациях:

✅ Метод должен выполнять какую-то утилитарную функцию.
✅ Для группировки функций, имеющих логическую связь с классом.

Отличие от методов класса и обычных методов

- Методы класса (@classmethod) принимают ссылку на cls в качестве первого аргумента и могут обращаться
  к атрибутам и другим методам класса.

- Обычные методы автоматически получают ссылку на self в качестве первого аргумента и используются для работы
  с данными или поведением конкретного экземпляра.

- Статические методы не получают ни self, ни cls автоматически и могут рассматриваться как обычные функции,
  организованные в пространстве имен класса.

Использование статических методов в классах позволяет поддерживать логическую структурированность кода,
сгруппировав вместе функции, которые логически связаны с классом, но не требуют доступа к его атрибутам или экземплярам.
"""


class ExampleClass:
    @staticmethod
    def static_method():
        print("Это статический метод.")


if __name__ == '__main__':
    ExampleClass.static_method()

    instance = ExampleClass()
    instance.static_method()
    