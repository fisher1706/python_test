"""
Threading - это механизм, который позволяет создавать и управлять параллельными потоками
выполнения внутри одного процесса. Поток (thread) - это наименьшая единица обработки внутри процесса,
которая может выполняться параллельно с другими потоками.

Основные концепции threading:

1️⃣ Параллельное выполнение:
Потоки позволяют выполнять несколько частей кода (потоков) параллельно в пределах одного процесса.
Это позволяет эффективно использовать многоядерные процессоры и улучшить производительность программы.

2️⃣ Совместное использование ресурсов:
Потоки разделяют общие ресурсы, такие как память или файлы, что может привести к проблемам с синхронизацией доступа
к этим ресурсам, поэтому важно использовать механизмы синхронизации, такие как блокировки, для обеспечения безопасного
доступа к общим данным из разных потоков.

3️⃣ Глобальная интерпретаторская блокировка (GIL):
Существует GIL, который предотвращает одновременное выполнение нескольких потоков на уровне байткода в одном процессе.
Это может ограничивать эффективность потоков для CPU-интенсивных задач, но не мешает параллельному
выполнению операций ввода-вывода.

4️⃣ Модуль threading:
Существует встроенный модуль threading, который предоставляет высокоуровневый интерфейс для создания и управления
потоками. Он обеспечивает классы Thread для создания потоков, а также средства синхронизации,
такие как блокировки, условные переменные и семафоры.

Пример использования threading:
"""

import threading


def worker():
    print("Hello from thread")


if __name__ == "__main__":
    # Создание и запуск потока
    t = threading.Thread(target=worker)
    t.start()
