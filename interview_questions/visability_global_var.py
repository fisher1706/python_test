# https://habr.com/ru/companies/otus/articles/487952/
"""
Области видимости: LEGB (local, вложенная, global, встроенная).
Область видимости имени или переменной зависит от того места в коде, где вы создаете эту переменную.

Локальная область видимости.
Все назначения выполняются в локальной области по умолчанию. Если вы присваиваете значение имени внутри функции,
то это имя будет иметь локальную область действия

Глобальная область видимости.
Объявляет переменную доступной для блока кода. Если вы присваиваете значение имени вне всех функций — скажем,
в начале модуля — тогда это имя будет иметь глобальную область видимости.

nonlocal.
Область видимости. С его помощью мы можем добавлять переопределение области во внутреннюю область.

Вложенная - когда функция объявляется в другой функции, то внутренняя функция имеет доступ к переменным внешней функции.
Такой поведение называется разграничением лексических областей видимости.
В тоже время внешняя функция не имеет доступа к переменным внутренней функции.

Встроенная область видимости (Built-in).
Это специальная область видимости Python, которая создается или загружается
всякий раз, когда вы запускаете скрипт или открываете интерактивный сеанс.
Эта область содержит имена, такие как ключевые слова, функции, исключения и другие атрибуты, встроенные в Python.
Имена в этой области Python также доступны повсюду в вашем коде.
Он автоматически загружается Python при запуске программы или сценария.
"""

"""
local
"""


def local_example_one(some_list):
    for element in some_list:
        print(element)


"""
Здесь element и some_list – локальные переменные, которые видны только внутри функции, и которые не могут 
использоваться за ее пределами с теми значениями, которые были им присвоены внутри функции при ее работе. 
То есть, если мы в основном теле программы вызовем 
print(element), то получим ошибку: NameError: name 'element' is not defined
"""


def local_example_two(some_list):
    for element in some_list:
        print(element)


"""
Здесь переменная element внутри функции и переменная с таким же именем вне ее – это две разные переменные, их значения 
не перекрещиваются и не взаимозаменяются. Они называются одинаково, но ссылаются на разные объекты в памяти. 
Более того, переменная с именем element внутри функции живет столько же, сколько выполняется функция и не больше.
"""


"""
global
"""
candy = 5


def global_example_candy():
    global candy
    candy += 1
    print(f'I have - {candy} candy.')


"""
nonlocal
"""


def nonlocal_example_candy():
    candy_nonlocal = 5

    def increment_candy():
        nonlocal candy_nonlocal
        candy_nonlocal += 1
        return candy_nonlocal
    return increment_candy


if __name__ == '__main__':
    """
    local_example_one
    """
    local_example_one([1, 2, 3])
    print("*" * 300)

    """
    local_example_two
    """
    element = 'q'
    local_example_two([1, 2, 3])
    print(element)
    print("*" * 300)

    """
    global
    """
    global_example_candy()
    global_example_candy()
    print(f'candy: {candy}')
    print("*" * 300)

    """
    nonlocal
    """
    result = nonlocal_example_candy()()
    print(f'Total {result} candy.')
