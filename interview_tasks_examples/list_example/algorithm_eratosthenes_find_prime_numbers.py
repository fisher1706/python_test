# https://www.youtube.com/watch?v=lgHS8SoEsB0
# https://www.youtube.com/watch?v=FTBFWYuKsM0


"""
1. Цель
Эта функция находит все простые числа вплоть до заданного, number используя алгоритм решета Эратосфена
— эффективный метод генерации простых чисел.

2. Инициализация
primes = [True] * (number + 1)
Мы создаем список длины number + 1, где каждый элемент равен True.
Индекс в этом списке представляет собой само число.
Первоначально мы предполагаем, что каждое число от 0до number является простым (True).

3. Начните с первого простого числа.
p = 2
Первое простое число — 2.
Мы проверим каждое число и, если оно все еще отмечено True, вычеркнем его кратные.

4. Основной цикл
while p * p <= number:
Нам нужно проверить только числа до √number.

5. Отметить кратные числа как не простые
if primes[p]:
    for i in range(p * p, number + 1, p):
        primes[i] = False
Если pпо-прежнему равно True, то оно простое.
Затем мы начинаем отмечать все его кратные (p*p, p*p + p, p*p + 2p, …) как False(не простые).

Мы начинаем с p*p того, что меньшие кратные уже были вычеркнуты более ранними простыми числами.

6. Переход к следующему кандидату
p += 1
Приращение p для проверки следующего числа.

7. Извлечение простых чисел
return [p for p in range(2, number + 1) if primes[p]]
Составьте и верните список всех помеченных номеров True.

Пример: sieve_of_eratosthenes(10)

- Начать с[True, True, True, True, True, True, True, True, True, True, True]
- Вычеркнуть числа, кратные 2 → удалить 4, 6, 8, 10
- Вычеркнуть числа, кратные 3 → удалить 9
- Оставшиеся True значения по индексам: 2, 3, 5, 7

Результат: [2, 3, 5, 7]
"""


def sieve_of_eratosthenes(number):
    # Изначально все числа считаются простыми (True)
    primes = [True] * (number + 1)
    p = 2

    while p * p <= number:
        # Если primes[p] не был изменен, то это простое число
        if primes[p]:
            # Обновляем все кратные p начиная с p^2
            for i in range(p * p, number + 1, p):
                primes[i] = False
        p += 1

    # Возвращаем все простые числа
    return [p for p in range(2, number + 1) if primes[p]]


if __name__ == "__main__":
    n = 20

    print(f"Простые числа до {n}: {sieve_of_eratosthenes(n)}")
