# https://ru.hexlet.io/courses/python-functions/lessons/map-filter-reduce/theory_unit

"""
Допустим, мы хотим применить к каждому элементу списка чисел функцию или операцию. Мы можем использовать цикл for,
чтобы пройтись по элементам списка и применить операции к каждому элементу.

Например, у нас есть список чисел. Мы хотим получить новый список, в котором каждый элемент будет возводиться в квадрат,
а затем вычитаться десять. Мы можем решить эту задачу через цикл:

    numbers = [1, 2, 3, 4, 5]
    new_numbers = []
    for num in numbers:
        squared = num ** 2
        subtracted = squared - 10
        new_numbers.append(subtracted)

    print(new_numbers)
    # [-9, -6, -1, 6, 15]

У такого подхода есть недостатки: код становится громоздким, трудно читаемым и поддерживаемым.
В этом случае можно воспользоваться функцией map, которая позволяет применить функцию к каждому элементу коллекции.
Она вернет новый список с преобразованными значениями.

map означает «отобразить».
Это название пришло из математики, где так же называется функция, которая отображает одно множество значений в
другое путем преобразования всех элементов с помощью трансформации. В большинстве языков также используется это имя.

Рассмотрим реализацию функции map:

    def map(func, iterable):
        result = []
        for item in iterable:
            result.append(func(item))
        return result

Этот цикл похож на цикл из примера выше. Здесь мы создаем пустой список result и затем циклом проходимся по элементам
переданного итерируемого объекта iterable. Для каждого элемента мы вызываем функцию func и добавляем ее результат в
список result. По завершении цикла мы возвращаем список result.
"""


def process_number(num):
    squared = num**2
    subtracted = squared - 10
    return subtracted


if __name__ == "__main__":
    numbers = [1, 2, 3, 4, 5]
    new_numbers = list(map(process_number, numbers))
    print(new_numbers)
