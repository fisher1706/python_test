# Алгоритм Левенштейна, также известный как алгоритм редакционных
# изменений, используется для определения минимального количества
# операций редактирования (вставка, удаление, замена символа),
# необходимых для преобразования одной строки в другую. Этот алгоритм
# широко используется в компьютерной лингвистике и для задач, связанных
# с обработкой текстов.

# Начальная настройка матрицы
# Матрица инициализируется строками и столбцами, представляющими символы
# слов "team" и "mate", включая дополнительную строку и столбец для
# пустой строки. Первая строка и первый столбец заполняются
# последовательными числами, представляющими стоимость преобразования
# пустой строки в каждый префикс другой строки.
#
# Заполнение матрицы
# Замена: Когда символы в текущих позициях обоих слов различаются,
# рассматривается замена. Например, изменение 't' на 'm' в начале.
# Вставка и удаление: Эти операции рассматриваются при выравнивании
# двух слов. Вставка в одно слово эквивалентна удалению в другом.
# Например, выравнивание 'tea' с 'mate' включает вставку 'm' в начале
# или удаление 't' в конце.
#
# Расчет стоимостей
# Стоимость для каждой ячейки определяется путем выбора минимального
# из трех соседних ячеек (слева, сверху, диагонально слева сверху) и
# добавления к ней единицы, за исключением случаев, когда символы
# совпадают - в этом случае берется значение диагональной ячейки без
# изменений.
#
# Окончательное расстояние
# Значение в правом нижнем углу матрицы дает расстояние Левенштейна.
# Для "team" и "mate" это значение равно 4, что означает, что для
# преобразования "team" в "mate" требуется минимум четыре изменения
# (одна замена, одно удаление и две вставки).
#
# В заключение, алгоритм расстояния Левенштейна создает матрицу для
# методического расчета минимального количества односимвольных правок,
# необходимых для преобразования одного слова в другое, учитывая замены,
# вставки и удаления.

#     ""  m   a   t   e
# ""  0    1    2    3    4
# t   1    1    2    2    3
# e   2    2    2    3    2
# a   3    3    2    3    3
# m   4    3    3    3    4


def levenshtein(seq1, seq2):
    """
    Рассчитывает расстояние Левенштейна между двумя строками.

    Расстояние Левенштейна определяется как минимальное количество редакционных
    правок, необходимых для преобразования одной строки в другую.
    Редакционные правки включают вставки, удаления и замены символов.

    Args:
    seq1 (str): Первая строка.
    seq2 (str): Вторая строка.

    Returns:
    int: Расстояние Левенштейна между seq1 и seq2.
    """
    n = len(seq1)
    m = len(seq2)
    # Инициализация матрицы нулями
    dp = [[0] * (m + 1) for _ in range(n + 1)]
    # Инициализация первого столбца и первой строки
    for i in range(1, n + 1):
        dp[i][0] = i
    for j in range(1, m + 1):
        dp[0][j] = j
    # Вычисление расстояния Левенштейна
    for i in range(1, n + 1):
        for j in range(1, m + 1):
            # Если символы совпадают, берем значение по диагонали
            if seq1[i - 1] == seq2[j - 1]:
                dp[i][j] = dp[i - 1][j - 1]
            else:
                # Иначе выбираем минимум из трех соседних значений и прибавляем 1
                dp[i][j] = 1 + min(
                    dp[i - 1][j],     # Удаление
                    dp[i][j - 1],     # Вставка
                    dp[i - 1][j - 1]  # Замена
                )
    return dp[-1][-1]

# https://www.youtube.com/watch?v=rEPggzaPoUw&list=PLRDzFCPr95fK7tr47883DFUbm4GeOjjc0&index=13


def levenshtein_two(a: str, b: str) -> int:
    f = [[i + j if i * j == 0 else 0 for j in range(len(b) + 1)] for i in range(len(a) + 1)]
    for i in range(1, len(a) + 1):
        for j in range(1, len(b) + 1):
            if a[i - 1] == b[j - 1]:
                f[i][j] = f[i - 1][j - 1]
            else:
                f[i][j] = 1 + min(f[i - 1][j], f[i][j - 1], f[i - 1][j - 1])
    return f[len(a)][len(b)]


def main():
    print(levenshtein("mate", "team"))
    print(levenshtein_two("mate", "team"))


if __name__ == "__main__":
    main()
